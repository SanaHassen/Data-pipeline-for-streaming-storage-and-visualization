version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
    - ALLOW_ANONYMOUS_LOGIN=yes 
    - ZOOKEEPER_CLIENT_PORT=2181  # Specify the client port here
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ls /"]
      interval: 5s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 5s
      retries: 20

  init-kafka:
    image: confluentinc/cp-kafka
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bikes --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic bikeshops --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic orders --replication-factor 1 --partitions 1
      "

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: "1"



  csv-to-kafka:
    build: 
      context: ./csv_produce_kafka
    depends_on:
      init-kafka:
        condition: service_completed_successfully
      streaming-app:
        condition: service_healthy


  cassandra:
    image: cassandra
    ports:
      - '9042:9042' 
    expose:
      - "9042"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 10

  cassandra-init:
    build: ./cassandra_init
    restart: "no"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      cassandra:
        condition: service_healthy

  streaming-app:
    build: ./streaming_app
    ports:
      - "4040:4040"
    depends_on:
      cassandra-init:
        condition: service_completed_successfully
      init-kafka:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "ls", "/app/healthy"]
      interval: 5s
      timeout: 5s
      retries: 20


  superset:
    image: apache/superset
    platform: linux/amd64
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_LOAD_EXAMPLES=yes
    volumes:
      - ./superset_config.py:/app/pythonpath/superset_config.py
    



  superset-init:
    build: ./superset_init
    restart: "no"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"



  # # New service for the dashboard
  # dashboard:
  #   build: ./dashboard 
  #   ports:
  #     - "8050:8050"
  #   depends_on:
  #     streaming-app:
  #       condition: service_healthy


